package web

import (
	"fmt"
	"github.com/jackc/pgx/v5/pgtype"
	sqlc "spendr/internal/database/sqlc"
)

templ TransactionsList(transactions []interface{}) {
	<div class="uk-margin-large">
		<div class="uk-flex uk-flex-between uk-flex-middle uk-margin-bottom">
			<h2 class="uk-h2">Recent transactions</h2>
			<button
				hx-post="/api/plaid/sync"
				hx-trigger="click"
				hx-target="#sync-status"
				hx-swap="innerHTML"
				class="uk-button uk-button-primary"
			>
				Sync transactions
			</button>
		</div>
		<div id="sync-status" class="uk-alert-success uk-text-small empty:hidden" uk-alert></div>

		<div class="uk-alert-warning uk-text-center uk-text-small" uk-alert>
			No transactions yet. Connect a bank account to get started.
		</div>
	</div>
}

templ UncategorizedTransactionsList(transactions []interface{}, wallets []interface{}) {
	<div class="uk-margin-large">
		<h2 class="uk-h2 uk-margin-bottom">Uncategorized transactions</h2>

		if len(transactions) == 0 {
			<div class="uk-alert-success uk-text-center uk-text-small" uk-alert>
				All transactions are categorized!
			</div>
		} else {
			<div class="uk-grid-small uk-child-width-1-1" uk-grid>
				for _, txn := range transactions {
					@UncategorizedTransactionCard(txn, wallets)
				}
			</div>
		}
	</div>
}

templ UncategorizedTransactionCard(transaction interface{}, wallets []interface{}) {
	if tx, ok := transaction.(sqlc.Transaction); ok {
		if wallet, ok := wallets[0].(sqlc.Wallet); ok {
			<div>
				<div class="uk-card uk-card-default uk-card-body uk-card-small">
					<div class="uk-grid-small uk-flex-middle" uk-grid>
						<div class="uk-width-expand@s">
							<h3 class="uk-text-bold">{ tx.Name }</h3>
							if tx.MerchantName.Valid && tx.MerchantName.String != "" {
								<p class="uk-text-small uk-text-muted">{ tx.MerchantName.String }</p>
							}
							if tx.Date.Valid {
								<p class="uk-text-small uk-text-muted">
									{ tx.Date.Time.Format("2006-01-02") }
								</p>
							}
						</div>
						<div class="uk-width-auto@s uk-text-right@s">
							if tx.Amount.Valid {
								<div class="uk-text-bold uk-margin-small-bottom">
									{ formatAmount(tx.Amount) }
								</div>
							}
							<div class="uk-grid-small uk-child-width-auto" uk-grid>
								<div>
									<form
										hx-post={ fmt.Sprintf("/api/transactions/%d/categorize", tx.ID) }
										hx-swap="outerHTML"
										hx-target="closest div.uk-card"
									>
										<input type="hidden" name="wallet_id" value={ fmt.Sprintf("%d", wallet.ID) }/>
										<input type="hidden" name="category_type" value="shared"/>
										<button
											type="submit"
											class="uk-button uk-button-primary uk-button-small"
										>
											Shared
										</button>
									</form>
								</div>
								<div>
									<form
										hx-post={ fmt.Sprintf("/api/transactions/%d/categorize", tx.ID) }
										hx-swap="outerHTML"
										hx-target="closest div.uk-card"
									>
										<input type="hidden" name="wallet_id" value={ fmt.Sprintf("%d", wallet.ID) }/>
										<input type="hidden" name="category_type" value="individual"/>
										<button
											type="submit"
											class="uk-button uk-button-default uk-button-small"
										>
											Individual
										</button>
									</form>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	}
}

func formatAmount(amount pgtype.Numeric) string {
	if !amount.Valid {
		return "$0.00"
	}
	// Convert pgtype.Numeric to Float8 (float64)
	float8Val, err := amount.Float64Value()
	if err != nil {
		return "$0.00"
	}
	return fmt.Sprintf("$%.2f", float8Val.Float64)
}

templ SharedTransactionsList(transactions []interface{}) {
	<div class="uk-margin-large">
		<h2 class="uk-h2 uk-margin-bottom">Shared transactions</h2>
		<div class="uk-alert-warning uk-text-center uk-text-small" uk-alert>
			No shared transactions yet.
		</div>
	</div>
}
