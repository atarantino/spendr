package web

import (
	"fmt"
	sqlc "spendr/internal/database/sqlc"
)

templ TransactionRow(tx interface{}) {
	if transaction, ok := tx.(sqlc.Transaction); ok {
		<tr>
			<td class="uk-text-small">
				{ transaction.Date.Time.Format("Jan 02, 2006") }
			</td>
			<td>
				<div>{ transaction.Name }</div>
				if transaction.MerchantName.Valid {
					<div class="uk-text-small uk-text-muted">{ transaction.MerchantName.String }</div>
				}
			</td>
			<td class="uk-text-right">
				if transaction.Amount.Valid && transaction.Amount.Int != nil {
					if transaction.Amount.Int.Sign() > 0 {
						<span class="uk-text-danger">
							${ fmt.Sprintf("%.2f", float64(transaction.Amount.Int.Int64())/100.0) }
						</span>
					} else if transaction.Amount.Int.Sign() < 0 {
						<span class="uk-text-success">
							-${ fmt.Sprintf("%.2f", -float64(transaction.Amount.Int.Int64())/100.0) }
						</span>
					} else {
						<span>$0.00</span>
					}
				}
			</td>
		</tr>
	}
}

templ TransactionCard(tx interface{}) {
	if transaction, ok := tx.(sqlc.Transaction); ok {
		<div class="uk-card uk-card-default uk-card-body uk-card-small uk-margin-small-bottom">
			<div class="uk-flex uk-flex-between">
				<div>
					<p class="uk-text-bold">{ transaction.Name }</p>
					<p class="uk-text-small uk-text-muted">
						{ transaction.Date.Time.Format("Jan 02, 2006") }
					</p>
					if transaction.MerchantName.Valid {
						<p class="uk-text-small uk-text-muted">{ transaction.MerchantName.String }</p>
					}
				</div>
				<div class="uk-text-right">
					if transaction.Amount.Valid && transaction.Amount.Int != nil {
						if transaction.Amount.Int.Sign() > 0 {
							<span class="uk-text-danger uk-text-bold">
								${ fmt.Sprintf("%.2f", float64(transaction.Amount.Int.Int64())/100.0) }
							</span>
						} else if transaction.Amount.Int.Sign() < 0 {
							<span class="uk-text-success uk-text-bold">
								-${ fmt.Sprintf("%.2f", -float64(transaction.Amount.Int.Int64())/100.0) }
							</span>
						} else {
							<span>$0.00</span>
						}
					}
				</div>
			</div>
		</div>
	}
}

templ DashboardPage(userID int, hasConnectedAccounts bool, transactions []interface{}, currentPage int, totalPages int) {
	@Base() {
		<div class="uk-container uk-container-expand">
			<div class="uk-flex uk-flex-between uk-flex-middle uk-margin-medium-bottom uk-padding-small uk-background-muted">
				<h2 class="uk-heading-small uk-margin-remove">Dashboard - User #{ string(userID) }</h2>
				<form method="post" action="/logout">
					@Button("Logout", "submit", "danger", "small", "")
				</form>
			</div>

			if !hasConnectedAccounts {
				@Card("Connect your first account", "uk-card-default") {
					<p class="uk-text-small uk-margin-small-bottom">
						Link a bank or card to start importing transactions.
					</p>
					@PlaidLinkButton()
				}
			} else {
				<div class="uk-margin-large">
					<div class="uk-flex uk-flex-between uk-flex-middle uk-margin-bottom">
						<h3 class="uk-h3">Connected accounts</h3>
						@PlaidLinkButton()
					</div>

					<div class="uk-grid-small uk-child-width-1-2@m" uk-grid>
						<div>
							@Card("Recent transactions", "uk-card-default") {
								if totalPages > 0 {
									<div class="uk-text-small uk-text-muted uk-margin-small-bottom">Page { fmt.Sprintf("%d", currentPage) } of { fmt.Sprintf("%d", totalPages) }</div>
								}
								if len(transactions) == 0 {
									<div class="uk-alert-warning uk-text-center uk-text-small" uk-alert>
										<p>No transactions yet</p>
										<p class="uk-text-meta">Connect a bank account to see activity</p>
									</div>
								} else {
									<div class="uk-visible@s">
										<table class="uk-table uk-table-small uk-table-divider uk-table-hover">
											<thead>
												<tr>
													<th>Date</th>
													<th>Description</th>
													<th class="uk-text-right">Amount</th>
												</tr>
											</thead>
											<tbody>
												for _, tx := range transactions {
													@TransactionRow(tx)
												}
											</tbody>
										</table>
									</div>

									<div class="uk-hidden@s">
										for _, tx := range transactions {
											@TransactionCard(tx)
										}
									</div>

									if totalPages > 1 {
										<ul class="uk-pagination uk-flex-center uk-margin-top">
											if currentPage > 1 {
												<li>
													<a href={ templ.URL(fmt.Sprintf("/dashboard?page=%d", currentPage-1)) }>
														<span uk-pagination-previous></span>
													</a>
												</li>
											} else {
												<li class="uk-disabled">
													<span>
														<span uk-pagination-previous></span>
													</span>
												</li>
											}

											<li class="uk-margin-small-left uk-margin-small-right">
												<span class="uk-text-small">
													Page { fmt.Sprintf("%d", currentPage) } of { fmt.Sprintf("%d", totalPages) }
												</span>
											</li>

											if currentPage < totalPages {
												<li>
													<a href={ templ.URL(fmt.Sprintf("/dashboard?page=%d", currentPage+1)) }>
														<span uk-pagination-next></span>
													</a>
												</li>
											} else {
												<li class="uk-disabled">
													<span>
														<span uk-pagination-next></span>
													</span>
												</li>
											}
										</ul>
									}
								}
							}
						</div>

						<div>
							@Card("Quick actions", "uk-card-default") {
								<div class="uk-grid-small uk-child-width-1-1" uk-grid>
									<div>
										<a href="/transactions/uncategorized" class="uk-button uk-button-default uk-width-1-1">
											Categorize transactions
										</a>
									</div>
									<div>
										<a href="/wallets" class="uk-button uk-button-default uk-width-1-1">
											Manage wallets
										</a>
									</div>
									<div>
										<a href="/accounts" class="uk-button uk-button-primary uk-width-1-1">
											View connected accounts
										</a>
									</div>
								</div>
							}
						</div>
					</div>
				</div>
			}
		</div>
	}
}
