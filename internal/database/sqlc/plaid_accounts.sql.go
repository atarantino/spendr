// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: plaid_accounts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlaidAccount = `-- name: CreatePlaidAccount :one
INSERT INTO plaid_accounts (plaid_item_id, account_id, name, official_name, type, subtype)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, plaid_item_id, account_id, name, official_name, type, subtype, created_at, updated_at
`

type CreatePlaidAccountParams struct {
	PlaidItemID  int32       `json:"plaid_item_id"`
	AccountID    string      `json:"account_id"`
	Name         string      `json:"name"`
	OfficialName pgtype.Text `json:"official_name"`
	Type         string      `json:"type"`
	Subtype      pgtype.Text `json:"subtype"`
}

func (q *Queries) CreatePlaidAccount(ctx context.Context, arg CreatePlaidAccountParams) (PlaidAccount, error) {
	row := q.db.QueryRow(ctx, createPlaidAccount,
		arg.PlaidItemID,
		arg.AccountID,
		arg.Name,
		arg.OfficialName,
		arg.Type,
		arg.Subtype,
	)
	var i PlaidAccount
	err := row.Scan(
		&i.ID,
		&i.PlaidItemID,
		&i.AccountID,
		&i.Name,
		&i.OfficialName,
		&i.Type,
		&i.Subtype,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlaidAccountByAccountID = `-- name: GetPlaidAccountByAccountID :one
SELECT id, plaid_item_id, account_id, name, official_name, type, subtype, created_at, updated_at
FROM plaid_accounts
WHERE account_id = $1
`

func (q *Queries) GetPlaidAccountByAccountID(ctx context.Context, accountID string) (PlaidAccount, error) {
	row := q.db.QueryRow(ctx, getPlaidAccountByAccountID, accountID)
	var i PlaidAccount
	err := row.Scan(
		&i.ID,
		&i.PlaidItemID,
		&i.AccountID,
		&i.Name,
		&i.OfficialName,
		&i.Type,
		&i.Subtype,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlaidAccountsByItemID = `-- name: GetPlaidAccountsByItemID :many
SELECT id, plaid_item_id, account_id, name, official_name, type, subtype, created_at, updated_at
FROM plaid_accounts
WHERE plaid_item_id = $1
`

func (q *Queries) GetPlaidAccountsByItemID(ctx context.Context, plaidItemID int32) ([]PlaidAccount, error) {
	rows, err := q.db.Query(ctx, getPlaidAccountsByItemID, plaidItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlaidAccount{}
	for rows.Next() {
		var i PlaidAccount
		if err := rows.Scan(
			&i.ID,
			&i.PlaidItemID,
			&i.AccountID,
			&i.Name,
			&i.OfficialName,
			&i.Type,
			&i.Subtype,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
