// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: plaid_items.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlaidItem = `-- name: CreatePlaidItem :one
INSERT INTO plaid_items (user_id, access_token, item_id, institution_name)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, access_token, item_id, institution_name, transactions_cursor, created_at, updated_at
`

type CreatePlaidItemParams struct {
	UserID          int32       `json:"user_id"`
	AccessToken     string      `json:"access_token"`
	ItemID          string      `json:"item_id"`
	InstitutionName pgtype.Text `json:"institution_name"`
}

type CreatePlaidItemRow struct {
	ID                 int32            `json:"id"`
	UserID             int32            `json:"user_id"`
	AccessToken        string           `json:"access_token"`
	ItemID             string           `json:"item_id"`
	InstitutionName    pgtype.Text      `json:"institution_name"`
	TransactionsCursor pgtype.Text      `json:"transactions_cursor"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
	UpdatedAt          pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreatePlaidItem(ctx context.Context, arg CreatePlaidItemParams) (CreatePlaidItemRow, error) {
	row := q.db.QueryRow(ctx, createPlaidItem,
		arg.UserID,
		arg.AccessToken,
		arg.ItemID,
		arg.InstitutionName,
	)
	var i CreatePlaidItemRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.ItemID,
		&i.InstitutionName,
		&i.TransactionsCursor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlaidItem = `-- name: DeletePlaidItem :exec
DELETE FROM plaid_items
WHERE id = $1
`

func (q *Queries) DeletePlaidItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePlaidItem, id)
	return err
}

const getPlaidItemByItemID = `-- name: GetPlaidItemByItemID :one
SELECT id, user_id, access_token, item_id, institution_name, transactions_cursor, created_at, updated_at
FROM plaid_items
WHERE item_id = $1
`

type GetPlaidItemByItemIDRow struct {
	ID                 int32            `json:"id"`
	UserID             int32            `json:"user_id"`
	AccessToken        string           `json:"access_token"`
	ItemID             string           `json:"item_id"`
	InstitutionName    pgtype.Text      `json:"institution_name"`
	TransactionsCursor pgtype.Text      `json:"transactions_cursor"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
	UpdatedAt          pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetPlaidItemByItemID(ctx context.Context, itemID string) (GetPlaidItemByItemIDRow, error) {
	row := q.db.QueryRow(ctx, getPlaidItemByItemID, itemID)
	var i GetPlaidItemByItemIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.ItemID,
		&i.InstitutionName,
		&i.TransactionsCursor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlaidItemsByUserID = `-- name: GetPlaidItemsByUserID :many
SELECT id, user_id, access_token, item_id, institution_name, transactions_cursor, created_at, updated_at
FROM plaid_items
WHERE user_id = $1
`

type GetPlaidItemsByUserIDRow struct {
	ID                 int32            `json:"id"`
	UserID             int32            `json:"user_id"`
	AccessToken        string           `json:"access_token"`
	ItemID             string           `json:"item_id"`
	InstitutionName    pgtype.Text      `json:"institution_name"`
	TransactionsCursor pgtype.Text      `json:"transactions_cursor"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
	UpdatedAt          pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetPlaidItemsByUserID(ctx context.Context, userID int32) ([]GetPlaidItemsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getPlaidItemsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPlaidItemsByUserIDRow{}
	for rows.Next() {
		var i GetPlaidItemsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccessToken,
			&i.ItemID,
			&i.InstitutionName,
			&i.TransactionsCursor,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaidItemAccessToken = `-- name: UpdatePlaidItemAccessToken :one
UPDATE plaid_items
SET access_token = $2, updated_at = now()
WHERE item_id = $1
RETURNING id, user_id, access_token, item_id, institution_name, transactions_cursor, created_at, updated_at
`

type UpdatePlaidItemAccessTokenParams struct {
	ItemID      string `json:"item_id"`
	AccessToken string `json:"access_token"`
}

type UpdatePlaidItemAccessTokenRow struct {
	ID                 int32            `json:"id"`
	UserID             int32            `json:"user_id"`
	AccessToken        string           `json:"access_token"`
	ItemID             string           `json:"item_id"`
	InstitutionName    pgtype.Text      `json:"institution_name"`
	TransactionsCursor pgtype.Text      `json:"transactions_cursor"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
	UpdatedAt          pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdatePlaidItemAccessToken(ctx context.Context, arg UpdatePlaidItemAccessTokenParams) (UpdatePlaidItemAccessTokenRow, error) {
	row := q.db.QueryRow(ctx, updatePlaidItemAccessToken, arg.ItemID, arg.AccessToken)
	var i UpdatePlaidItemAccessTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.ItemID,
		&i.InstitutionName,
		&i.TransactionsCursor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePlaidItemCursor = `-- name: UpdatePlaidItemCursor :one
UPDATE plaid_items
SET transactions_cursor = $2, updated_at = now()
WHERE item_id = $1
RETURNING id, user_id, access_token, item_id, institution_name, transactions_cursor, created_at, updated_at
`

type UpdatePlaidItemCursorParams struct {
	ItemID             string      `json:"item_id"`
	TransactionsCursor pgtype.Text `json:"transactions_cursor"`
}

type UpdatePlaidItemCursorRow struct {
	ID                 int32            `json:"id"`
	UserID             int32            `json:"user_id"`
	AccessToken        string           `json:"access_token"`
	ItemID             string           `json:"item_id"`
	InstitutionName    pgtype.Text      `json:"institution_name"`
	TransactionsCursor pgtype.Text      `json:"transactions_cursor"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
	UpdatedAt          pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdatePlaidItemCursor(ctx context.Context, arg UpdatePlaidItemCursorParams) (UpdatePlaidItemCursorRow, error) {
	row := q.db.QueryRow(ctx, updatePlaidItemCursor, arg.ItemID, arg.TransactionsCursor)
	var i UpdatePlaidItemCursorRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.ItemID,
		&i.InstitutionName,
		&i.TransactionsCursor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
