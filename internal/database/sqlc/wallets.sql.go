// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: wallets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWalletMember = `-- name: AddWalletMember :exec
INSERT INTO wallet_members (wallet_id, user_id)
VALUES ($1, $2)
`

type AddWalletMemberParams struct {
	WalletID int32 `json:"wallet_id"`
	UserID   int32 `json:"user_id"`
}

func (q *Queries) AddWalletMember(ctx context.Context, arg AddWalletMemberParams) error {
	_, err := q.db.Exec(ctx, addWalletMember, arg.WalletID, arg.UserID)
	return err
}

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateWallet(ctx context.Context, name string) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet, name)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletByID = `-- name: GetWalletByID :one
SELECT id, name, created_at, updated_at
FROM wallets
WHERE id = $1
`

func (q *Queries) GetWalletByID(ctx context.Context, id int32) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByID, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletByUserID = `-- name: GetWalletByUserID :one
SELECT w.id, w.name, w.created_at, w.updated_at
FROM wallets w
JOIN wallet_members wm ON w.id = wm.wallet_id
WHERE wm.user_id = $1
LIMIT 1
`

func (q *Queries) GetWalletByUserID(ctx context.Context, userID int32) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByUserID, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletMembersByWalletID = `-- name: GetWalletMembersByWalletID :many
SELECT wm.wallet_id, wm.user_id, wm.joined_at, u.name, u.email
FROM wallet_members wm
JOIN users u ON wm.user_id = u.id
WHERE wm.wallet_id = $1
`

type GetWalletMembersByWalletIDRow struct {
	WalletID int32            `json:"wallet_id"`
	UserID   int32            `json:"user_id"`
	JoinedAt pgtype.Timestamp `json:"joined_at"`
	Name     string           `json:"name"`
	Email    string           `json:"email"`
}

func (q *Queries) GetWalletMembersByWalletID(ctx context.Context, walletID int32) ([]GetWalletMembersByWalletIDRow, error) {
	rows, err := q.db.Query(ctx, getWalletMembersByWalletID, walletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWalletMembersByWalletIDRow{}
	for rows.Next() {
		var i GetWalletMembersByWalletIDRow
		if err := rows.Scan(
			&i.WalletID,
			&i.UserID,
			&i.JoinedAt,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeWalletMember = `-- name: RemoveWalletMember :exec
DELETE FROM wallet_members
WHERE wallet_id = $1 AND user_id = $2
`

type RemoveWalletMemberParams struct {
	WalletID int32 `json:"wallet_id"`
	UserID   int32 `json:"user_id"`
}

func (q *Queries) RemoveWalletMember(ctx context.Context, arg RemoveWalletMemberParams) error {
	_, err := q.db.Exec(ctx, removeWalletMember, arg.WalletID, arg.UserID)
	return err
}
